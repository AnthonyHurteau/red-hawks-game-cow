AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Red Hawks Game Cow Microservices for local development

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs20.x
    MemorySize: 4096
    Architectures:
      - arm64
    Environment:
      Variables:
        TABLE_NAME:
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'http://localhost:5173'"

Resources:
  # Players
  GetPlayers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/players
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /players
            Method: get
  # Games
  GetGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /games
            Method: get
  CreateGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: create.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /games
            Method: post
  UpdateGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: update.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /games
            Method: put
  DeleteGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: delete.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /games/{id}
            Method: delete
  # Votes
  GetVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /votes/{userId}
            Method: get
  GetVotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: getList.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /votes
            Method: get
  CreateVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: create.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /votes
            Method: post
  UpdateVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: update.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /votes
            Method: put
  DeleteVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: delete.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /votes/{userId}
            Method: delete
  DeleteVotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: deleteAll.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /votes/all
            Method: delete
  MockVotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: mock.lambdaHandler
      Environment:
        Variables:
          NUMBER_OF_VOTES:
      Events:
        Event:
          Type: Api
          Properties:
            Path: /votes/mock
            Method: post
  # Users
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: create.lambdaHandler
      Environment:
        Variables:
          ADMIN_PASSWORD:
      Events:
        Event:
          Type: Api
          Properties:
            Path: /users
            Method: post
  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: update.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /users
            Method: put
  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: delete.lambdaHandler
      Events:
        Event:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: delete

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  ApiFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
