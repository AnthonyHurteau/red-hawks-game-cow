AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Red Hawks Game Cow Microservices for local development

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs20.x
    MemorySize: 4096
    Architectures:
      - arm64
    Environment:
      Variables:
        TABLE_NAME:

Resources:
  # HTTP API Api Gateway
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - content-type
          - Authorization
        AllowOrigins:
          - "http://localhost:5173"
      Auth:
        Authorizers:
          FunctionAuth:
            FunctionPayloadType: REQUEST
            AuthorizerPayloadFormatVersion: "2.0"
            FunctionArn: !GetAtt Auth.Arn
            Identity:
              Headers:
                - Authorization

  # Auth
  Auth:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/auth
      Handler: auth.lambdaHandler

  # Players
  GetPlayers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/players
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /players
            Method: get
            ApiId: !Ref HttpApi
  # Games
  GetGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /games
            Method: get
            ApiId: !Ref HttpApi
  CreateGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: create.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: FunctionAuth
            Path: /games
            Method: post
            ApiId: !Ref HttpApi
  UpdateGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: update.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: FunctionAuth
            Path: /games
            Method: put
            ApiId: !Ref HttpApi
  DeleteGame:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/games
      Handler: delete.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: FunctionAuth
            Path: /games/{id}
            Method: delete
            ApiId: !Ref HttpApi
  # Votes
  GetVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /votes/{userId}
            Method: get
            ApiId: !Ref HttpApi
  GetVotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: getList.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /votes
            Method: get
            ApiId: !Ref HttpApi
  CreateVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: create.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /votes
            Method: post
            ApiId: !Ref HttpApi
  UpdateVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: update.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /votes
            Method: put
            ApiId: !Ref HttpApi
  DeleteVote:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: delete.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /votes/{userId}
            Method: delete
            ApiId: !Ref HttpApi
  DeleteVotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: deleteAll.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: FunctionAuth
            Path: /votes/all
            Method: delete
            ApiId: !Ref HttpApi
  MockVotes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/votes
      Handler: mock.lambdaHandler
      Environment:
        Variables:
          NUMBER_OF_VOTES:
      Events:
        Event:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: FunctionAuth
            Path: /votes/mock
            Method: post
            ApiId: !Ref HttpApi
  # Users
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: get.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /users/{id}
            Method: get
            ApiId: !Ref HttpApi
  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: create.lambdaHandler
      Environment:
        Variables:
          ADMIN_PASSWORD:
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /users
            Method: post
            ApiId: !Ref HttpApi
  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: update.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /users
            Method: put
            ApiId: !Ref HttpApi
  DeleteUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/users
      Handler: delete.lambdaHandler
      Events:
        Event:
          Type: HttpApi
          Properties:
            Path: /users/{id}
            Method: delete
            ApiId: !Ref HttpApi

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  ApiFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
